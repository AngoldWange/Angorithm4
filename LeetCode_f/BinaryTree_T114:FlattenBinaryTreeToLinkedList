/**
 *LeetCode T114: FlattenBinaryTreeToLinkedList
 *medium
 *fs
 *Thought from :leetcode-solution
 *2021.7.27
 */

/**
 *summary:
 *   The easies way: collect the results of traversal with a array, and link the nodes in orther.
 *   Better way to linking: 
 *          ╭────╮
 *          │link│-->
 *     o____o____o....o....o....o....o
 *
 *               ╭────╮
 *               │link│-->
 *     o____o____o....o....o....o....o
 *
 *               ╭────╮ 
 *               │link│-->
 *     o____o____o____o....o....o....o      ...
 *                                                                                                                                  ☄
 *   Difficult I have met:
 *     # The passing of pointers
 *
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        vector<TreeNode*>list;
        front_traverse(root,list);
        TreeNode *Pre, *Aft;
        for(int i = 1; i< list.size(); ++i){
            Pre = list[i-1];
            Aft = list[i];
            Pre->left = nullptr;
            Pre->right = Aft; 
        }
    }

    void front_traverse(TreeNode* root, vector<TreeNode*>&list){
        if(root != NULL ) {
            list.push_back(root);
            front_traverse(root-> left , list);
            front_traverse(root-> right, list);
        }
    }
};
